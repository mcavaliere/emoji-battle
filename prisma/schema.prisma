// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  votes         Vote[]
  accounts      Account[]
  sessions      Session[]
  rounds        Round[]
}

model Account {
  id                       Int      @id @default(autoincrement())
  userId                   Int
  type                     String
  provider                 String   @default("github")
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], name: "userId")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Emoji {
  id         Int    @id @default(autoincrement())
  name       String
  externalId String @map(name: "external_id")
  native     String
  unified    String @unique
  colons     String
  votes      Vote[]
}

model Vote {
  id        Int      @id @default(autoincrement())
  userId    Int
  emojiId   Int
  roundId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  emoji     Emoji    @relation(fields: [emojiId], references: [id])
  round     Round    @relation(fields: [roundId], references: [id])
}

model Round {
  id              Int       @id @default(autoincrement())
  startedByUserId Int
  startedAt       DateTime  @default(now())
  endedAt         DateTime?
  updatedAt       DateTime  @default(now())
  createdAt       DateTime  @default(now())
  startedBy       User      @relation(fields: [startedByUserId], references: [id])
  votes           Vote[]
}
